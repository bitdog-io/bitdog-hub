#!/usr/bin/env node

//-----------------------------------------------------------------------------
//
//	bitdoghub
//
//	Copyright (c) 2015-2017 Bitdog LLC.
//
//	SOFTWARE NOTICE AND LICENSE
//
//	This file is part of bitdog-hub.
//
//	bitdog-hub is free software: you can redistribute it and/or modify
//	it under the terms of the GNU General Public License as published
//	by the Free Software Foundation, either version 3 of the License,
//	or (at your option) any later version.
//
//	bitdog-hub is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License
//	along with bitdog-hub.  If not, see <http://www.gnu.org/licenses/>.
//
//-----------------------------------------------------------------------------

var path = require('path');
var program = require('commander');
var bitdogClient = require('bitdog-client');
var child_process = require('child_process');

function continueUpgrade() {
	var child = child_process.spawn('/bin/bash', [ '-c', '/bin/bash <(curl --silent --output - --max-time 120 https://bitdog.io/installhub)' ], { stdio: 'inherit' });

	child.on('close', function(code) {
	});

}

program
    .version('2.0.01');
	 
program.command('register')
    .description('Register this Bitdog Hub with Bitdog Cloud.')
    .option('-u,--username <username>', 'The username for the Bitdog IoT Cloud to register this hub with.')
    .option('-p,--passphrase <passphrase>', 'The passphrase for the Bitdog IoT Cloud to register this hub with.')
    .option('-n,--nodename <nodename>', 'The name that will be displayed on the Bitdog IoT Cloud dashboard.')
	.option('-v,--video', 'Enable local security camera.')
    .action(function (options) {

		process.argv.forEach((val, index) => {
		  console.log('Arg ' + index + ': ' + val);
		});

        if (typeof options.passphrase === typeof undefined || typeof options.username === typeof undefined) {
            console.log('Please provide a username and passphrase when registering.');
            this.outputHelp();
        }
        else {
            console.log('Registering node...')
            var adminManager = bitdogClient.adminManager;

            var nodeName = typeof options.nodename === typeof undefined ? 'New Node' : options.nodename;
            adminManager.registerNode(options.username, options.passphrase, nodeName, 
			function (success) { 

				if(typeof options.video !== typeof undefined) {
					bitdogClient.configuration.set('video:enabled', true);
				} else {
					bitdogClient.configuration.set('video:enabled', false);
				}

				console.log('Registration successful.');
				 
			}, 
			function (error) { 
				console.log(error); 
			});

        }


    });

program
    .command('start')
    .description('Start Bitdog Hub.')
	.option('-l,--logpath <log directory path>', 'The path for log files.')
    .option('-c,--configpath <config file path>', 'The path for configuration files.')
	.option('-t,--tail', 'Write logs to console also.')
    .option('-e,--extension <extension file path | clear>', 'Path to file that has extension code. Use clear to remote extension from stored configuration.')
    .option('-d,--debug', 'Start remote debugging and wait for attachment.')


    .action(function (options) {
		if(bitdogClient.configuration.isRegistered === false) {
			var readline = require('readline');
			var rl = readline.createInterface(process.stdin, process.stdout);
			rl.question("This Bitdog Hub is not registered, try automatic registration? (y/n) ", function(answer) {
				rl.close();
				if(answer === 'y')
					start(options);
			});

		} else {
			start(options);
		}
	 
		function start(options) {
			var fs = require('fs');
			var packageFilePath = path.resolve(__dirname, '../');
			var debugScriptPath = path.resolve(__dirname, 'RemoteDebug.js');
			var pidFile = path.resolve(__dirname,'pid.txt');
			var args = [];

			var opt = { 
					stdio: 'inherit', 
					env: process.env, 
					cwd: process.cwd(), 
					detached: true 
				}; 

				opt.env.LD_LIBRARY_PATH = '/usr/local/lib'

				if(options.debug) {
					console.log("Debug mode");
					args.push(debugScriptPath);
					args.push(packageFilePath);

				} else {
					args.push(packageFilePath);
				}

				if(options.tail) {
					args.push('--tail');
					console.log("Tailing log to console");
				}

				if(options.configpath) {
					args.push('--configpath');
					args.push(options.configpath);

				}

				if(options.logpath) {
					args.push('--logpath');
					args.push(options.logpath);
				}

				if(options.extension) {
					args.push('--extension');
					args.push(options.extension);
				}
 				
				var child = child_process.spawn('node', args, opt); 
				var pidId = child.pid;
				
				// required so the parent can exit 
				child.unref(); 

				fs.writeFileSync(pidFile, pidId);

				setTimeout(function() {
					try
					{

						child_process.execSync('/bin/kill -s 0 ' + pidId);
						console.log('Bitdog Hub started');
					    process.exitCode = 0;

					} catch(e) {					
						console.log('Bitdog Hub has failed to start properly, pid:' + pidId);
   						fs.unlinkSync(pidFile);
						process.exitCode = 1;
					}

				}, 10000);


		}

    });

program
    .command('stop')
    .description('Stop Bitdog Hub.')
    .action(function (options) {
        var fs = require('fs');
		var packageFilePath = path.resolve(__dirname, '../');
		var pidFile = path.resolve(__dirname,'pid.txt');

		try {

			try
			{
				fs.accessSync(pidFile, fs.F_OK);
			}
			catch(e) {
				console.log('Process id file not found, bitdog-hub may not be running');
				process.exitCode = 1;
				return;
			}

			var pid = fs.readFileSync(pidFile);
			var pidId = parseInt(pid);

			try
			{
				process.kill(pidId,'SIGINT');
			}
			catch(e) {
			}

			setTimeout(function() {
				try
				{
					child_process.execSync('/bin/kill -s 0 ' + pidId);
					console.log('Bitdog Hub did not stop in timely fashion');
					process.exitCode = 1;

				} catch(e) {					
				    console.log('Bitdog Hub has stopped');
   				    fs.unlinkSync(pidFile);
					process.exitCode = 0;
				}

			}, 20000);

   
		} catch (e) {
			console.log(JSON.stringify(e));
		}

    });

program
	.command('help')
	.description('Print usage and options.')
	.action(function(options) {
	 program.outputHelp();
	});

program
    .command('upgrade')
    .description('Upgrade to the latest Bitdog Hub software.')
    .action(function (options) {
        var fs = require('fs');
		var packageFilePath = path.resolve(__dirname, '../');
		var pidFile = path.resolve(__dirname,'pid.txt');
		var isRunning = true;

		try {

			try
			{
				fs.accessSync(pidFile, fs.F_OK);
			}
			catch(e) {
				isRunning = false;
			    console.log('Bitdog Hub does not seem to be running');

			}

			if(isRunning === true) {
				var pid = fs.readFileSync(pidFile);
				var pidId = parseInt(pid);

				console.log('Bitdog Hub is running, stopping now');

				try
				{
					process.kill(pidId,'SIGINT');
				}
				catch(e) {
				}

				setTimeout(function() {
					try
					{
						child_process.execSync('/bin/kill -s 0 ' + pidId);
						console.log('Bitdog Hub did not stop in timely fashion');
						process.exitCode = 1;

					} catch(e) {					
						console.log('Bitdog Hub has stopped');
   						fs.unlinkSync(pidFile);
						continueUpgrade();
					}

				}, 20000);

			} else {
				continueUpgrade();
			}
   
		} catch (e) {
			console.log(JSON.stringify(e));
		}


    });

program.parse(process.argv);

if (!process.argv.slice(2).length) {
    program.outputHelp();
	process.exitCode = 1;

}



